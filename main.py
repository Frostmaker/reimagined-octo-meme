import pandas as pd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def simple_search(input_string: str, dataset_filename: str) -> None:
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
    :param input_string: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–∫–æ–º–∞—Ç–µ
    :param dataset_filename: —Ñ–∞–π–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
    :return: None
    '''

    cities = pd.read_csv(dataset_filename)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤
    flag = True
    for i in range(len(cities)):
        # –ë–µ—Ä–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–∂–¥—ã–π –≥–æ—Ä–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if flag and cities.iloc[i]['city'] in input_string.lower():
            flag = False
            print(f'–ì–æ—Ä–æ–¥ - {cities.iloc[i]["–ì–æ—Ä–æ–¥"]}\n'
                  f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {cities.iloc[i]["lat"]}, {cities.iloc[i]["lng"]}')
        # –ï—Å–ª–∏ –ø–æ–¥–æ—à–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤, —Ç–æ –≤—ã–≤–µ–¥–µ–º –æ–± —ç—Ç–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif cities.iloc[i]['city'] in input_string.lower():
            print(f'\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n'
                  f'–ì–æ—Ä–æ–¥ - {cities.iloc[i]["–ì–æ—Ä–æ–¥"]}\n'
                  f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {cities.iloc[i]["lat"]}, {cities.iloc[i]["lng"]}')
    else:
        flag = True


def trie_search(input_string: str, dataset_filename: str):
    pass


def fuzzy_search(input_string: str, dataset_filename: str) -> None:
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –Ω–µ—è–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    :param input_string:
    :param dataset_filename:
    :return: None
    '''
    cities = pd.read_csv(dataset_filename)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤
    cities_list = cities['–ì–æ—Ä–æ–¥'].tolist()
    process_res = []
    for word in input_string.split():
            process_res.append([word, process.extract(word, cities_list, limit=1)])

    # print(process_res)

    for elem in process_res:
        for i in range(len(cities)):
            if cities.iloc[i]['city'] in elem[0].lower():
                for city, prob in elem[1]:
                    print(f'\nC –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {prob}%, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n'
                          f'–ì–æ—Ä–æ–¥ - {city}\n'
                          f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {cities[cities["–ì–æ—Ä–æ–¥"] == city].iloc[0]["lat"]}, {cities[cities["–ì–æ—Ä–æ–¥"] == city].iloc[0]["lng"]}')


# region –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
#
# df = pd.read_excel('russian_cities.xlsx')
# # print(df.info())
# cities = df['–ì–æ—Ä–æ–¥'].tolist()
# new_cities = []
# for city in cities:
#     city = city.lower()
#     if '—ë' in city:
#         city = city.replace("—ë", "–µ")
#     if city[-2:] in ["—ã–π", "–∏–π"]:
#         city = city[:-2]
#     elif city[-1] in ["—å", "–∞", "—ã", "–π"]:
#         city = city[0:-1]
#     new_cities.append(city)
#
# # print(cities)
# # print(new_cities)
# sample_string = sample_string.lower()
# df_new = df[['–ì–æ—Ä–æ–¥', 'lat', 'lng']]
# df_new.insert(1, 'city', new_cities)
# # print(df_new.head(3))
#
# df_new.to_csv('russian_cities_valid.csv')
# endregion


# print('üü®üü¶üü©üüßüü•')
input_string = input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ')
simple_search(input_string, 'russian_cities_valid.csv')
print()

print()
fuzzy_search(input_string, 'russian_cities_valid.csv')
